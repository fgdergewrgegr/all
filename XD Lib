local xdl = {} -- local xdl = loadstring(game:HttpGet("https://raw.githubusercontent.com/fgdergewrgegr/all/refs/heads/main/XD%20Lib"))()
print("XD Lib")
-- xdl["_____"] = game:GetService("_____")
	xdl["w"] = game:GetService("Workspace")
	xdl["p"] = game:GetService("Players")
	xdl["r"] = game:GetService("RunService")
	xdl["d"] = game:GetService("Debris")
	xdl["rs"] = game:GetService("ReplicatedStorage")
	xdl["rf"] = game:GetService("ReplicatedFirst")
	xdl["sg"] = game:GetService("StarterGui")
	xdl["hs"] = game:GetService("HttpService")
	xdl["sg"] = game:GetService("StarterGui")
	xdl["uis"] = game:GetService("UserInputService")

-- xdl["_____"] = xdl._____.
	xdl["me"] = xdl.p.LocalPlayer
	xdl["m"] = xdl.me:GetMouse()
	xdl["name"] = xdl.me.Name
	xdl["dname"] = xdl.me.DisplayName

-- xdl["_____"] = function() end
	xdl["char"] = function() return xdl.me.Character or (xdl.me.CharacterAdded:Wait() and xdl.me.Character) end
	xdl["tah"] = function() return xdl.m.Target, xdl.m.Hit end
	xdl["plrs"] = function() return ipairs(xdl.p:GetPlayers()) end

-- function xdl:_____() end
	function xdl:convert(to, data)
		local funcs = {
			["vector3"] = function(data) if data:IsA("BasePart") then return data.Position end end,
			["name"] = function(data) if typeof(data) == "Instance" then return data.Name end end
		}; funcs["vec3"] = funcs["vector3"]; funcs["v3"] = funcs["vec3"]
		return funcs[to:lower()](data) or data
	end; function xdl:con(...) return xdl:convert(...) end
	function xdl:c(...) return xdl:con(...) end

	--[[
			function xdl:_____(...) return xdl:_____(...) end
				function xdl:_____(...) return xdl:_____(...) end
	]]

	-- ♥others♥
		function xdl:pcall(text, func) local s,e = pcall(func); if not(s) then print(e); if text then print(text) end end end
		function xdl:magnitude(pos1, pos2) return (xdl:convert("Vector3", pos1) - xdl:convert("Vector3", pos2)).Magnitude end
			function xdl:mag(...) return xdl:magnitude(...) end
			function xdl:mg(...) return xdl:mag(...) end

	-- ♥fwcd♥
		function xdl:ffc(parent, name) return parent:FindFirstChild(xdl:convert("Name", name)) end
		function xdl:ffcs(parent, names) for i,name in names do names[i] = xdl:ffc(parent, name) end return unpack(names) end
		function xdl:ffct(parent, names) for i,name in names do local obj = xdl:ffc(parent, name); if obj then parent = obj end; names[i] = obj end return unpack(names) end

		function xdl:ffd(parent, name) return parent:FindFirstDescendant(xdl:convert("Name", name)) end
		function xdl:ffds(parent, names) for i,name in names do names[i] = xdl:ffd(parent, name) end return unpack(names) end

		function xdl:wfc(parent, name) return parent:WaitForChild(xdl:convert("Name", name)) end
		function xdl:wfcs(parent, names) for i,name in names do names[i] = xdl:wfc(parent, name) end return unpack(names) end
		function xdl:wfct(parent, names) for i,name in names do local obj = xdl:wfc(parent, name); if obj then parent = obj end; names[i] = obj end return unpack(names) end

	-- ♥check♥
		function xdl:check_list(list, find) local i = table.find(list, find); if t then return list[i] end end
			function xdl:c_list(...) return xdl:check_list(...) end
			function xdl:cl(...) return xdl:c_list(...) end
		function xdl:check_hum(hum) if hum and hum.Health ~= 0 and hum:GetState() ~= Enum.HumanoidStateType.Dead then return hum end end
			function xdl:c_hum(...) return xdl:check_hum(...) end
			function xdl:ch(...) return xdl:ch(...) end

	-- ♥gets♥
		function xdl:get_parents(obj) if obj.Parent then local p = obj; local tree = {obj} while p.Parent do p = p.Parent; table.insert(tree, p) end; return tree end end
			function xdl:g_parents(...) return xdl:get_parents(...) end
			function xdl:gp(...) return xdl:g_parents(...) end
		function xdl:get_char(obj) if not(obj) then obj = xdl.me end; for _,plr in xdl.plrs() do local char = plr.Character; if obj == plr or (char and obj:IsDescendantOf(char)) then return char end end end
			function xdl:g_char(...) return xdl:get_char(...) end
			function xdl:gc(...) return xdl:g_char(...) end
		function xdl:get_char_child(name, obj) return xdl:get_char(obj) and xdl:ffc(xdl:get_char(obj), xdl:convert("Name", name)) end
			function xdl:g_char_child(...) return xdl:get_char_child(...) end
			function xdl:gcc(...) return xdl:g_char_child(...) end
		function xdl:get_limbs(obj) return xdl:get_char_child("Right Arm", obj), xdl:get_char_child("Right Leg", obj), xdl:get_char_child("Left Arm", obj), xdl:get_char_child("Left Leg", obj) end
			function xdl:g_limbs(...) return xdl:get_limbs(...) end
			function xdl:gl(...) return xdl:g_limbs(...) end
		function xdl:get_mychar_child(name) return xdl:ffc(xdl.char(), name) or xdl.wfc(xdl.char(), name) end
			function xdl:g_mychar_child(...) return xdl:get_mychar_child(...) end
			function xdl:gmcc(...) return xdl:g_mychar_child(...) end

-- xdl["_____"] = function() end
	xdl["hrp"] = function() return xdl:gmcc("HumanoidRootPart") end
	xdl["hum"] = function() return xdl:gmcc("Humanoid") end
	xdl["hd"] = function() return xdl:gmcc("Head") end

	xdl["limbs"] = function() return xdl:gmcc("Right Arm"), xdl:gmcc("Right Leg"), xdl:gmcc("Left Arm"), xdl:gmcc("Left Leg") end
	xdl["all"] = function() return xdl.hrp(), xdl.hum(), xdl.hd() end

return xdl
