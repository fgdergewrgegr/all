

--[[


local path, luav = "LuaV/LuaV.lua", _G.luav if not(luav) then
if isfile(path) then luav = dofile(path)(); _G.luav = luav else
local data = game:HttpGet("https://raw.githubusercontent.com/fgdergewrgegr/all/refs/heads/main/LuaV")
task.defer(writefile, path, data); luav = loadstring(data)(); _G.luav = luav end end; path = nil


]]


luav = {
	data = {
		["Instance"] = {},
		["string"] = {},
		["table"] = {},
		-- ["Vector3"] = {},
		-- ["number"] = {},
		["function"] = {}
	}, metadata = {
		["Instance"] = {},
		["string"] = {},
		["table"] = {},
		-- ["Vector3"] = {},
		-- ["number"] = {},
		["function"] = {}
	}, tg = {
		coredata = {},
		addfuncs = {},
		objs = {}
	}, iadds = {},
	tgflt = {}
}

local f = luav.tg.addfuncs
local af = luav.tg.coredata
local o = luav.tg.objs
local a = luav.iadds

local timefunc, timefunc1 = os.clock(), os.clock()
local write = writefile
local read = readfile
local dof = dofile
local append = appendfile
local del = delfile
local isf = isfile

local str = tostring
local int = tonumber

-- o["_____"] = game:GetService("_____")
	o["w"] = game:GetService("Workspace")
	o["l"] = game:GetService("Lighting")
	o["p"] = game:GetService("Players")
	o["r"] = game:GetService("RunService")
	o["d"] = game:GetService("Debris")
	o["rs"] = game:GetService("ReplicatedStorage")
	o["rf"] = game:GetService("ReplicatedFirst")
	o["sg"] = game:GetService("StarterGui")
	o["cg"] = gethui() or game:GetService("CoreGui")
	o["chat"] = game:GetService("Chat")
	o["hs"] = game:GetService("HttpService")
	o["uis"] = game:GetService("UserInputService")

-- o["_____"] = o._____.
	o["me"] = o.p.LocalPlayer
	o["char"] = o.me.Character
	o["cam"] = o.w.CurrentCamera
	o["m"] = o.me:GetMouse()
	o["name"] = o.me.Name
	o["dname"] = o.me.DisplayName
	o["pg"] = o.me.PlayerGui
	o["muid"] = o.me.UserId

-- o["_____"] = 
	o["mhv3"] = Vector3.new("inf", "inf", "inf")
	o["nv3"] = Vector3.new()

local olr_typeof = typeof
function af.typeof(obj)
	local type = olr_typeof(obj)
	if type == "table" then return obj["luav"] or type
	else return type end
end; typeof = af.typeof

function af.LuaV(...)
	local lt = {...}
	for i,obj in lt do
		local type = typeof(obj)
		local stable = luav.data[type]
		local metastable = luav.metadata[type]
		if obj and stable then
			if type == "table" and not(obj.luav) then
				local mlt = {__index = stable}
				if metastable then for i,v in metastable do mlt[i] = v end end
				lt[i] = setmetatable(obj, mlt)
			elseif type == "function" then
				local mlt = {__index = stable, __call = function(s, ...) return s[1](...) end}
				if metastable then for i,v in metastable do mlt[i] = v end end
				lt[i] = setmetatable({obj, luav = type}, mlt)
			else
				local mlt = {__index = function(ltt,arg) return stable[arg] or ltt[1][arg] end, __call = af["convert"]}
				if metastable then for i,v in metastable do mlt[i] = v end end
				lt[i] = setmetatable({obj, luav = type}, mlt)
			end
		end
	end; return unpack(lt)
end; LuaV = af.LuaV

function af.unLuaV(...)
	local lt = {...}
	for i,obj in lt do
		if typeof(obj) == "table" and obj["luav"] then
			lt[i] = obj[1]
		end
	end; return unpack(lt)
end; unLuaV = af.unLuaV

function af:duplicate(num, data) local lt = {}; for a=1,num do lt[#lt+1] = data end; return unpack(lt) end
af["d"], af["dup"] = af:duplicate(2, af["duplicate"]); function af:convert(to, arg, _)
	local funcs = { -- ["_____"] = function(data) if  then return end end,
		["vector3"] = function(data) if data:IsA("BasePart") then return data.Position end end,
		["cframe"] = function(data) if typeof(data) == "Instance" then return data.CFrame end end,
		["char"] = function(data)
			if typeof(data) == "Instance" then local char = o.p[1]:GetPlayerFromCharacter(data); if char then return char else
			for _,plr in f.plrs() do local char = plr.Character; if char and data:IsDescendantOf(char) then return char end end end
			return (debugg and warn("cant find a character using: "..str(data)..": "..typeof(data))) else
			return af:c(data, "plr").Character or (debugg and warn("cant find a character using: "..str(data)..": "..typeof(data))) end end,
		["player"] = function(data)
			if typeof(data) == "Instance" and not(data:IsA("Player")) then return o.p[1]:GetPlayerFromCharacter(data) or o.p:ffc(data.Name) or o.p[1]:GetPlayerFromCharacter(af:c(data, "char")) or (debugg and warn("cant find a player using: "..str(data)..": "..typeof(data)))
			elseif typeof(data) == "number" then return o.p[1]:GetPlayerByUserId(data) or o.p:ffcp("FollowUserId", data) or o.p:ffcp("AccountAge", data) or (debugg and warn("cant find a player using: "..str(data)..": "..typeof(data)))
			elseif typeof(data) == "string" then return o.p[1]:FindFirstChild(data) or o.p:ffcp("DisplayName", data) or (debugg and warn("cant find a player using: "..str(data)..": "..typeof(data)))
			else return (debugg and warn(typeof(data).."is not supported for find a player")) end end,
		["id"] = function(data) local plr = af:c(data, "plr"); return LuaV(function() return plr.UserId end):pa() end,
		["string"] = function(data, arg) if typeof(data) == "table" then if not(arg) then arg = "" end; for _,str in data do if _ == 1 then data = str else data = data..arg..str end end; return data end end,
		["readable_string"] = function(data) if typeof(data) == "table" then return "{"..f:c("s", data, ", ").."}" elseif typeof(data) == "Instance" then return typeof(data) end end,
		["function"] = function(data) if typeof(data) == "string" then return loadstring(data) end end,
		["name"] = function(data) if typeof(data) == "Instance" then return data.Name end end
	}; -- funcs["_____"], funcs["_____"] = funcs["_____"], funcs["_____"]
	funcs["v3"], funcs["vec3"] = funcs["vector3"], funcs["vector3"]
	funcs["cf"], funcs["cfr"] = funcs["cframe"], funcs["cframe"]
	funcs["c"], funcs["cr"] = funcs["char"], funcs["char"]
	funcs["p"], funcs["plr"] = funcs["player"], funcs["player"]
	funcs["s"], funcs["str"] = funcs["string"], funcs["string"]
	funcs["rs"], funcs["r_str"] = funcs["readable_string"], funcs["readable_string"]
	funcs["f"], funcs["func"] = funcs["function"], funcs["function"]
	funcs["n"], funcs["nm"] = funcs["name"], funcs["name"]
	if self == af then self = {to}; to = arg; arg = _ end
	return LuaV(funcs[to:lower()](self[1], arg)) or self[1]
end; af["c"], af["con"] = af:d(2, af["convert"])

af["get_time"] = function(cmd, svar)
	local funcs = {
		rww = function() local temp = timefunc; timefunc = os.clock() return os.clock() - temp end,
		rwwv = function(var) return os.clock(), os.clock() - var end,
		rw = function() if timefunc ~= 0 then local temp = timefunc timefunc = 0 return os.clock() - temp else timefunc = os.clock() end end,
		rwv = function(var) if var ~= 0 then return 0, os.clock() - var else return os.clock(), 0 end end,
		r = function() if timefunc1 ~= 0 then return os.clock() - timefunc1 end end,
		rv = function(var) if var ~= 0 then return os.clock() - var end end
	}; return funcs[cmd](svar)
end; af["gt"], af["g_time"] = af:d(2, af["get_time"])

local lt = luav.metadata["table"]
	lt.__add = function(lt1, lt2) for i,v in lt2 do if typeof(i) == "number" then lt1:i(LuaV(v)) else lt1[i] = LuaV(v) end end return lt1 end
	lt.__sub = function(lt1, lt2) for i,v in lt2 do local fi = lt1:fi(v); if fi ~= 0 then lt1[fi] = nil end end; return lt1 end
	lt.__mul = function(lt, num) local flt = LuaV({}); for a=1,num do flt = flt + lt end; return flt end
	lt.__pow = function(lt, num) for a=1, num do lt = lt + lt end; return lt end
	lt.__div = function(lt, obj) local num = 0; for _,v in lt do if obj == v then num = num + 1 end end; return num end
	lt.__idiv = function(lt, obj) local num = 0; for i,_ in lt do if obj == i then num = num + 1 end end; return num end
	lt.__mod = function(lt, obj) local num = 0; for i,v in lt do if obj == i or obj == v then num = num + 1 end end; return num end
	lt.__eq = function(lt1, lt2) local t = true; for i,v in lt1 do if lt2[i] ~= v then t = false end end; return t end

local lt = luav.metadata["string"]
	lt.__add = function(str1, str2) str1 = str1[1]; return str1.." "..str2 end
	lt.__sub = function(str1, str2) str1 = str1[1]; local fstr = str1:gsub(str2, ""); return fstr end
	lt.__mul = function(str, num) str = str[1]; local fstr = ""; for a=1, num do fstr = fstr..str end; return fstr end
	lt.__pow = function(str, num) str = str[1]; for a=1, num do str = str..str end; return str end
	lt.__div = function(str1, str2) str1 = str1[1]; local _,num = str1:gsub(str2, ""); return num end

-- local lt = luav.metadata["Vector3"]
-- 	lt.__add = function(vec1, vec2) vec2 = LuaV(vec2); if typeof(vec2) == "table" then for i,v in LuaV(vec2) do vec1[i] = vec1[i] + v end; return vec1 else vec2 = vec2("v3") end
-- 	lt.__sub = function(vec1, vec2) for i,v in LuaV(vec2) do vec1[i] = vec1[i] - v end; return vec1 end
-- 	lt.__mul = function(vec1, vec2) for i,v in LuaV(vec2) do vec1[i] = vec1[i] * v end; return vec1 end
-- 	lt.__pow = function(vec1, vec2) for i,v in LuaV(vec2) do vec1[i] = vec1[i] / v end; return vec1 end

-- function lt:____()  end
	local lt = luav.data["Instance"]
		-- ♥fwcdp♥
			function lt:ffc(...) local lt = {...}; for i,name in lt do lt[i] = self[1]:FindFirstChild(af:c(name, "n")) end return LuaV(unpack(lt)) end
			function lt:ffct(...) local lt = {...}; for i,name in lt do local obj = self:ffc(name); if obj then self = obj end; lt[i] = obj end return unpack(lt) end

			function lt:wfc(...) local lt = {...}; for i,name in lt do lt[i] = self[1]:WaitForChild(af:c(name, "n")) end return LuaV(unpack(lt)) end
			function lt:wfct(...) local lt = {...}; for i,name in lt do local obj = self:wfc(name); if obj then self = obj end; lt[i] = obj end return unpack(lt) end

			function lt:fwc(...) local lt = {...}; for i,name in lt do name = LuaV(name)("n"); lt[i] = self:ffc(name) or self:wfc(name) end; return unpack(lt) end

			function lt:ffd(...) local lt = {...}; for i,name in lt do lt[i] = self[1]:FindFirstDescendant(af:c(name, "n")) end return LuaV(unpack(lt)) end

			function lt:ffcp(prop, ...) local lt = {...}; for _,obj in pairs(self:gc()) do local data = LuaV(function() if #lt ~= 0 then for _,v in lt do if obj[prop] == v then return obj end end else return obj end end):p(); if data then return LuaV(data) end end end
			function lt:ffdp(prop, ...) local lt = {...}; for _,obj in pairs(self:gd()) do local data = LuaV(function() if #lt ~= 0 then for _,v in lt do if obj[prop] == v then return obj end end else return obj end end):p(); if data then return LuaV(data) end end end
			function lt:ffcsp(prop, ...) local lt, lt1 = {...}, {}; for _,obj in pairs(self:gc()) do local data = LuaV(function() if table.maxn(lt) ~= 0 then for _,v in lt do if obj[prop] == v then return obj end end else return obj end end):p(); lt1[#lt1+1] = data end; return LuaV(unpack(lt1)) end
			function lt:ffdsp(prop, ...) local lt, lt1 = {...}, {}; for _,obj in pairs(self:gd()) do local data = LuaV(function() if #lt ~= 0 then for _,v in lt do if obj[prop] == v then return obj end end else return obj end end):p(); lt1[#lt1+1] = data end; return LuaV(unpack(lt1)) end

		-- ♥checks♥
			function lt:check_hum() self = self[1]; if self and self.Health ~= 0 and self:GetState() ~= Enum.HumanoidStateType.Dead then return self end end
			function lt:check_friend(id, arg) if not(id) then id = luav.usid end; self = self("plr"); id = LuaV(id)("id")
			if self:GetAttribute("Friend") == nil then local t = LuaV(function() return self[1]:IsFriendsWith(id) end):pa(arg); self:SetAttribute("Friend", t); return t else return self:GetAttribute("Friend") end end
			
			-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
				lt["ch"], lt["c_hum"] = af:d(2, lt["check_hum"])
				lt["cf"], lt["c_friend"] = af:d(2, lt["check_friend"])

		--♥gets♥
			function lt:get_children() return self[1]:GetChildren() end
			function lt:get_descendants() return self[1]:GetDescendants() end
			function lt:get_attribute(...) local lt = {...}; for _,name in lt do lt[_] = LuaV(self[1]:GetAttribute(name)) end; return unpack(lt) end
			function lt:get_parents() self = self[1]; if self.Parent then local p = self; local tree = {self} while p.Parent do p = p.Parent; tree[#tree+1] = LuaV(p) end; return tree end end

			-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
				lt["gc"], lt["g_children"] = af:d(2, lt["get_children"])
				lt["gd"], lt["g_descendants"] = af:d(2, lt["get_descendants"])
				lt["ga"], lt["g_attribute"] = af:d(2, lt["get_attribute"])
				lt["gp"], lt["g_parents"] = af:d(2, lt["get_parents"])

		--♥sets♥
			function lt:set_attribute(name, value) self[1]:SetAttribute(af:c(name, "s"), value); return LuaV(value) end

			-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
				lt["sa"], lt["s_attribute"] = af:d(2, lt["set_attribute"])
		
		--♥others♥
			local function hci(parent, class, data) local obj = Instance.new(class, parent[1]); for pror, val in data do obj[pror] = val end; return LuaV(obj) end
			function lt:create_ins(class, data, config) local format = a[class] or {}; class, data = format[1] or class, format[2] or data; local obj = self:ffc(data.Name)
			if obj and (not(config) or (config and not(config.only_new))) then for prop, val in data do obj[1][prop] = af:c(val, prop) end return obj else return hci(self, class, data) end end

			-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
				lt["cins"], lt["c_ins"] = af:d(2, lt["create_ins"])

	local lt = luav.data["function"]
		function lt:pcall() local s, e = pcall(self[1]); return e end
		function lt:pcall_arg(arg) local s, e = pcall(self[1]); if s then return e else return arg end end
		function lt:time(...) local time = os.clock(); local data = {self(...)}; return os.clock() - time, unpack(data) end
		function lt:ptime(...) local data = {self:time(...)}; print(data[1]); data[1] = nil; return unpack(data) end
		function lt:taskspawn(...) task.spawn(self[1], ...) end
		function lt:taskdefer(...) task.defer(self[1], ...) end

		-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
			lt["p"], lt["pcl"] = af:d(2, lt["pcall"])
			lt["pa"], lt["pcla"] = af:d(2, lt["pcall_arg"])
			lt["t"], lt["tm"] = af:d(2, lt["time"])
			lt["pt"], lt["ptm"] = af:d(2, lt["ptime"])
			lt["ts"], lt["tspawn"] = af:d(2, lt["taskspawn"])
			lt["td"], lt["tdefer"] = af:d(2, lt["taskdefer"])

	local lt = luav.data["string"]
		function lt:read_write(name) if name then write("LuaV/saves/"..name..".txt", self[1]) else return read("LuaV/saves/"..self[1]..".txt") end end
		function lt:json_read_write(name) if name then write("LuaV/saves/"..name..".txt", o.hs[1]:JSONEncode(self[1])) else return read("LuaV/saves/"..self[1]..".txt") end end
		function lt:save_run(name) if name then write("LuaV/saves/"..name..".func", self[1]) else return read("LuaV/saves/"..self[1]..".func") end end
		function lt:fastload(name) local fname = name or self[1]; local path = "LuaV/fastload/"..fname.."/"..fname; if name then
		self = self[1]; if isf(path..".lua") then LuaV(write):td(path..".link", self); LuaV(write):td(path..".lua", game:HttpGet(self)); return dof(path..".lua")
		else write(path..".link", self); local data = game:HttpGet(self); write(path..".lua", data); return loadstring(data) end
		else LuaV(write):td(path..".lua", game:HttpGet(read(path..".link"))); return dof(path..".lua") end end
		function lt:run(...) return loadstring(self[1])(...) end

		-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
			lt["tn"], lt["tnum"] = af:d(2, lt["tonumbr"])
			lt["rw"], lt["rd_wr"] = af:d(2, lt["read_write"])
			lt["jrw"], lt["j_rd_wr"] = af:d(2, lt["json_read_write"])
			lt["sr"], lt["sv_rn"] = af:d(2, lt["save_run"])
			lt["fl"], lt["fload"] = af:d(2, lt["fastload"])
			lt["r"], lt["rn"] = af:d(2, lt["run"])

	-- local lt = luav.data["number"]
	-- 	function lt:destabilize(num) local onum = self[1]; return LuaV(onum-num, onum+num) end
	--  function lt:magnitude(vec) return (self + af:c(vec, "v3")).Magnitude end

	-- 	-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
	-- 		lt["d"], lt["dblz"] = af:d(2, lt["destabilize"])

	local lt = luav.data["table"]
		function lt:find_i(...) local lt = LuaV({...}); for i,v in lt do lt[i] = table.find(self, v) end; return lt:u() end
		function lt:find(...) local lt = LuaV({...}); for i,v in lt do local f = self:fi(v); if f ~= 0 then lt[i] = f end end; return lt:u() end
		function lt:insert(...) for _,v in {...} do self[#self+1] = v end; return self end
		function lt:unpack() return LuaV(unpack(self)) end
		function lt:ultra_for() local flt = LuaV({}); local inum = 1 for i,v in self do if type(v) == "table" then for _,v in LuaV(v):ultra_for() do flt[inum] = v; inum = inum + 1 end
		elseif type(i) == "number" then flt[inum] = v; inum = inum + 1 else flt[i] = v end end; return flt end
		function lt:ultra_unpack() return unpack(self:uf()) end
		function lt:print() print(unLuaV(self:u())) end
		function lt:readable_print() local fstr = "{"; for i,v in {unLuaV(self:u())} do if fstr ~= "{" then fstr = fstr..", "..str(v) else fstr = fstr..str(v) end end; print(fstr.."}") end
		function lt:to_global() local num = #luav.tgflt + 1; for name,func in self do luav.tgflt[num] = func; loadstring(name.." = luav.tgflt["..num.."]")() end; luav.tgflt[num] = nil end

		-- lt["_____"], lt["_____"] = af:d(2, lt["_____"])
			lt["fi"], lt["fndi"] = af:d(2, lt["find_i"])
			lt["f"], lt["fnd"] = af:d(2, lt["find"])
			lt["i"], lt["ins"] = af:d(2, lt["insert"])
			lt["u"], lt["unp"] = af:d(2, lt["unpack"])
			lt["uf"], lt["ufor"] = af:d(2, lt["ultra_for"])
			lt["uu"], lt["uunp"] = af:d(2, lt["ultra_unpack"])
			lt["p"], lt["prn"] = af:d(2, lt["print"])
			lt["rp"], lt["rprn"] = af:d(2, lt["readable_print"])
			lt["tg"], lt["toglb"] = af:d(2, lt["to_global"])

-- f["____"] = function()
	f["tah"] = function() return LuaV(f.m.Target, f.m.Hit) end
	f["plrs"] = function() return {LuaV(unpack(ipairs(o.p[1]:GetPlayers())))} end
	f["muid"] = function() return LuaV(f.me.UserId) end
	f["cam"] = function() return LuaV(f.w.CurrentCamera) end
	f["grt"] = function() return LuaV(f.p.RespawnTime) end
	f["iy"] = function() return LuaV("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"):fastload("IY") end
	f["dex"] = function() return LuaV("https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"):fastload("DEX") end
	f["vhsiy"] = function() return LuaV("https://raw.githubusercontent.com/fgdergewrgegr/ftap/refs/heads/main/my%20IY"):fastload("VHS IY") end

for _,lt in luav.data do
	for _, name in {"convert", "con", "c", "duplicate", "dup", "d"} do
		lt[name] = af[name]
	end
end
for _,obj in o do o[_] = LuaV(obj) end
for _,obj in f do f[_] = LuaV(obj) end

for _,lt in luav.coredata do for name, data do getgenv()[name] = data end end

print[[
	
██╗░░░░░██╗░░░██╗░█████╗░██╗░░░██╗
██║░░░░░██║░░░██║██╔══██╗██║░░░██║
██║░░░░░██║░░░██║███████║╚██╗░██╔╝
██║░░░░░██║░░░██║██╔══██║░╚████╔╝░
███████╗╚██████╔╝██║░░██║░░╚██╔╝░░
╚══════╝░╚═════╝░╚═╝░░╚═╝░░░╚═╝░░░
]]; return luav
